[["index.html", "Data Loader 1 ", " Data Loader PM liquid lab 2023-01-30 1 This class includes methods that handle EventLog loading and data preprocessing. It offers tools for Event Log word translation and/or grouping using a specified dictionary, loading arrays of dataLoader objects (used for storing structured data from which the functionality of the other pMinerR classes can be used) and manipulating them to create various displays. In this brief documentation, the classs primary methods will be discussed, and usage examples from a sample Event Log will be provided. "],["constructor-method-dataloader.html", "2 Constructor method: dataLoader()", " 2 Constructor method: dataLoader() The first step is to construct a DataLoader class object, from which you could access all the classs methods. To do so we use the constructor method as follows: objDL= dataLoader() The consturctor admit the following parameters: param verbose.mode: boolean. If TRUE some messages will appear in console, during the computation; otherwise the computation will be silent. param save.memory: boolean. If TRUE, dataLoader() avoid to keep in memory the entire original csv. param max.char.length.label: numeric. It defines the max length of the event name strings. Once create the Data Loader object it is possible to run all its function as elements of the data loader object list. Once the dataLoader object has been created, it is possible to load Event Log using one of the two methods provided by the DataLoaderclass, which are load.csv() function and load.data.frame() function. "],["loading-functions-load.csv-load.data.html", "3 Loading functions: load.csv(), load.data.frame()", " 3 Loading functions: load.csv(), load.data.frame() Both of the loading functions operate identically, what differs is the way the function receives the event log as input. When using the load.csv function, a.csv file is requested as input; however, when using the load.data.frame function, the event log provided as input must be a data frame. The following inputs must be given and are mandatory for the correct loading: IDName: name of EL column for case ID EVENTName: name of EL column for Event label dateColumnName: name for the Date column, format.column.date = date format (default:\"%d/%m/%Y %H:%M:%S\") If the load. csv function is performed, it is important to enter details regarding the format in which the event log file is saved: quote: default \" \" \" sep : default , The loading functions offer additional functionality, which the user may specify using the following fields: convertUTF: Boolean; suppress.invalid.date : Boolean, if true suppress invalid date; guessDataFormat: Boolean, if true allows to automatically calculate the date format. Lets try using the functions to load an EventLog: EL&lt;-read.csv(&quot;EventLog1.csv&quot;,header = T,sep = &quot;,&quot;,quote = &quot;&quot;) head(EL) ## ID Event Date ## 1 1 Medical Visit 2001-01-14 ## 2 1 Biopsy 2001-01-19 ## 3 1 total resection 2001-02-04 ## 4 1 MedicalVisit 2001-04-14 ## 5 1 death 2001-04-15 ## 6 2 Medical Visit 2001-01-09 objDL$load.csv(nomeFile = &quot;EventLog1.csv&quot;, IDName = &quot;ID&quot;, EVENTName = &quot;Event&quot;, dateColumnName = &quot;Date&quot;, sep = &quot;,&quot;, quote = &quot;&quot;, format.column.date = &quot;%Y-%m-%d&quot;) objDL$load.data.frame(mydata = EL, IDName = &quot;ID&quot;, EVENTName = &quot;Event&quot;, dateColumnName = &quot;Date&quot;, format.column.date = &quot;%Y-%m-%d&quot;) Once the event log is loaded, the Data Loader class will create structured data that can be accessed using the getData() function. obj.out&lt;-objDL$getData() "],["access-structured-data-function-getdata.html", "4 Access structured data function: getData()", " 4 Access structured data function: getData() getData function returns as output a list of items. The following are the principal ones: arrayAssociativo: character array containing all the event labels obj.out$arrayAssociativo ## [1] &quot;BEGIN&quot; &quot;END&quot; &quot;Medical Visit&quot; &quot;Biopsy&quot; ## [5] &quot;total resection&quot; &quot;MedicalVisit&quot; &quot;death&quot; &quot;chemotherapy&quot; ## [9] &quot;Imaging&quot; &quot;partial resection&quot; &quot;radiotherapy&quot; BEGIN and END MMatrix: a square matrix containing on the rows and columns the labels of possible events. this matrix shows in each cell the number of patients whose trace is characterized by a row event successively followed by a column event. obj.out$MMatrix ## BEGIN END Medical Visit Biopsy total resection MedicalVisit death chemotherapy ## BEGIN 0 0 53 0 0 0 0 0 ## END 0 0 0 0 0 0 0 0 ## Medical Visit 0 0 76 52 0 0 9 0 ## Biopsy 0 0 0 0 37 0 4 0 ## total resection 0 0 0 0 0 13 11 10 ## MedicalVisit 0 12 0 0 0 49 40 0 ## death 0 88 0 0 0 0 0 0 ## chemotherapy 0 0 0 0 0 6 0 69 ## Imaging 0 0 64 37 0 0 2 0 ## partial resection 0 0 0 0 0 14 21 11 ## radiotherapy 0 0 0 0 0 19 1 0 ## Imaging partial resection radiotherapy ## BEGIN 47 0 0 ## END 0 0 0 ## Medical Visit 56 0 0 ## Biopsy 0 48 0 ## total resection 0 0 3 ## MedicalVisit 0 0 0 ## death 0 0 0 ## chemotherapy 0 0 15 ## Imaging 55 0 0 ## partial resection 0 0 2 ## radiotherapy 0 0 179 MMatrix.perc: as MMatrix but normalized by the total number of cases obj.out$MMatrix.perc ## BEGIN END Medical Visit Biopsy total resection MedicalVisit death ## BEGIN 0 0.0000000 0.5300000 0.0000000 0.0000000 0.00000000 0.000000000 ## END 0 0.0000000 0.0000000 0.0000000 0.0000000 0.00000000 0.000000000 ## Medical Visit 0 0.0000000 0.3937824 0.2694301 0.0000000 0.00000000 0.046632124 ## Biopsy 0 0.0000000 0.0000000 0.0000000 0.4157303 0.00000000 0.044943820 ## total resection 0 0.0000000 0.0000000 0.0000000 0.0000000 0.35135135 0.297297297 ## MedicalVisit 0 0.1188119 0.0000000 0.0000000 0.0000000 0.48514851 0.396039604 ## death 0 1.0000000 0.0000000 0.0000000 0.0000000 0.00000000 0.000000000 ## chemotherapy 0 0.0000000 0.0000000 0.0000000 0.0000000 0.06666667 0.000000000 ## Imaging 0 0.0000000 0.4050633 0.2341772 0.0000000 0.00000000 0.012658228 ## partial resection 0 0.0000000 0.0000000 0.0000000 0.0000000 0.29166667 0.437500000 ## radiotherapy 0 0.0000000 0.0000000 0.0000000 0.0000000 0.09547739 0.005025126 ## chemotherapy Imaging partial resection radiotherapy ## BEGIN 0.0000000 0.4700000 0.0000000 0.00000000 ## END 0.0000000 0.0000000 0.0000000 0.00000000 ## Medical Visit 0.0000000 0.2901554 0.0000000 0.00000000 ## Biopsy 0.0000000 0.0000000 0.5393258 0.00000000 ## total resection 0.2702703 0.0000000 0.0000000 0.08108108 ## MedicalVisit 0.0000000 0.0000000 0.0000000 0.00000000 ## death 0.0000000 0.0000000 0.0000000 0.00000000 ## chemotherapy 0.7666667 0.0000000 0.0000000 0.16666667 ## Imaging 0.0000000 0.3481013 0.0000000 0.00000000 ## partial resection 0.2291667 0.0000000 0.0000000 0.04166667 ## radiotherapy 0.0000000 0.0000000 0.0000000 0.89949749 Pat.process: a list in which each component represents a sub-portion of the Event Log (with the addition of a column for time difference between each event and the first event in the trace, used as starting time) related to a single case. Each item in the list is accessed with the case ID. obj.out$pat.process[[&quot;12&quot;]] ## pMineR.internal.ID.Evt ID Event Date pMineR.deltaDate ## 115 115 12 Medical Visit 07/01/2001 00:00:00 0 ## 116 116 12 Biopsy 12/01/2001 00:00:00 7200 ## 117 117 12 partial resection 17/01/2001 00:00:00 14400 ## 118 118 12 MedicalVisit 12/07/2001 00:00:00 267780 ## 119 119 12 death 13/07/2001 00:00:00 269220 wordSequence.raw: a charachter array list, in which each element contains the event labels that make up the individual case trace. Each element can be accessed with the case ID. obj.out$wordSequence.raw[[&quot;12&quot;]] ## [1] &quot;Medical Visit&quot; &quot;Biopsy&quot; &quot;partial resection&quot; &quot;MedicalVisit&quot; ## [5] &quot;death&quot; "],["word-translation-and-grouping-functions-applyfilter-and-gettranslation.html", "5 Word translation and grouping functions: applyFilter() and getTranslation()", " 5 Word translation and grouping functions: applyFilter() and getTranslation() applyFilter() function allows filtering on the Event Log based on: Specific event: using array.events.to.remove input to explicit the label of the events to remove; Specific patient: using array.pazienti.to.keep or array.pazienti.to.remove to explicit the ID of cases to keep (or to remove); Specific attribute values: using remove.events.by.attribute.name input (or remove.patients.by.attribute.name) to remove event (or cases) according to the value (by.arr.attribute.value) of a specific attribute. The function could give different output based on the value for the whatToReturn input: whatToReturn= itself will return DataLoader object itself; whatToReturn= csv will return a new modified Event Log as a new data frame whatToreturn= dataLoader will return a new DataLoader object Suppose we want to remove all rows that correspond to Biopsy events: new_EL&lt;-objDL$applyFilter(array.events.to.remove = c(&quot;Biopsy&quot;),whatToReturn = &quot;csv&quot;) unique(new_EL$Event) ## [1] &quot;Medical Visit&quot; &quot;total resection&quot; &quot;MedicalVisit&quot; &quot;death&quot; ## [5] &quot;chemotherapy&quot; &quot;Imaging&quot; &quot;partial resection&quot; &quot;radiotherapy&quot; getTransalation() function allows to modify event label according to a new dictionary that the user may upload using the add.Dictionary() function. addDictionary() function adds dictionaries in order, afterward, to translate or group some event name. the new dictionary should be a csv file, consisting of two columns: the first one for the original event labels and the second one for the new labels. The addDictionary function will require as input: Dictionary file name; Separator (default ,) dict.name: name for the new dictionary (default main) column.event.name: name of the first column of the csv file (referred to the actual event Label) Once the new dictionaries are loaded you can apply them using the getTranslation(), which has the following inputs: dict.name: name of the dictionary to use column.name: dictionary column name containing the new labels toReturn: for explicit the kind of the desired output (see whatToReturn output of applyFilter() function) Lets try using the methods just listed to change the event label MedicalVisit to Medical Visit. To do so we will use the following dictionary: read.csv(&quot;newDictionary.csv&quot;,sep = &quot;;&quot;,header = T,quote = &quot;&quot;) ## oldLabel newLabel ## 1 Medical Visit Medical Visit ## 2 chemotherapy chemotherapy ## 3 partial resection partial resection ## 4 Imaging Imaging ## 5 total resection total resection ## 6 radiotherapy radiotherapy ## 7 death death ## 8 MedicalVisit Medical Visit At first we have to load the new dictionary with the addDictionary function: objDL$addDictionary(fileName = &quot;newDictionary.csv&quot;, sep = &quot;;&quot;, dict.name = &quot;dict1&quot;, column.event.name = &quot;oldLabel&quot;) Then using getTranslation, the dictionary can be used () newEL&lt;-objDL$getTranslation(column.name = &quot;newLabel&quot;,dict.name = &quot;dict1&quot;,toReturn = &quot;csv&quot;) unique(newEL$Event) ## [1] &quot;Medical Visit&quot; &quot;total resection&quot; &quot;death&quot; &quot;Imaging&quot; ## [5] &quot;radiotherapy&quot; &quot;chemotherapy&quot; &quot;partial resection&quot; "]]
